{"version":3,"sources":["chartOptions.js","components/Chart.js","components/Counter.js","components/Threshold.js","App.js","serviceWorker.js","index.js"],"names":["chartOptions","responsive","legend","display","maintainAspectRatio","elements","line","fill","scales","xAxes","gridLines","drawBorder","barPercentage","ticks","autoSkip","maxRotation","minRotation","fontSize","fontStyle","yAxes","min","max","stepSize","animation","duration","Chart","state","chartData","labels","datasets","label","data","backgroundColor","moods","threshold","className","style","margin","fontWeight","color","this","options","height","Component","getDerivedStateFromProps","nextProps","prevState","tempOptions","Counter","candiesDropped","props","counter","flex","alignSelf","marginLeft","Threshold","sliderVal","minValue","maxValue","value","step","onChange","setState","changeThreshold","onChangeComplete","updateThreshold","App","sData","socket","connected","getChartData","ndata","map","emit","componentWillMount","io","on","console","log","candies","componentDidMount","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAuDeA,EAvDE,CACbC,YAAY,EACZC,OAAQ,CAACC,SAAS,GAClBC,qBAAqB,EACrBC,SAAU,CACNC,KAAM,CACJC,MAAM,IAGZC,OAAQ,CACJC,MAAO,CAAC,CACJC,UAAU,CAAEC,YAAW,GACvBC,cAAe,GACfC,MAAO,CACHC,UAAU,EACVC,YAAa,GACbC,YAAa,GACbC,SAAU,GACVC,UAAW,UAGnBC,MAAO,CAAC,CACJT,UAAU,CAAEC,YAAY,GACxBE,MAAM,CACFO,IAAI,EACJC,IAAI,GACJC,SAAS,OAIrBC,UAAU,CACNC,SAAU,MCxBZC,G,kNACFC,MAAQ,CACJC,UAAW,CACPC,OAAQ,CAAC,OAAQ,QAAS,MAAO,SAAU,WACzCC,SAAU,CACR,CACEC,MAAO,WACPC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,IACvBC,gBAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,cAIlFhC,aAAcA,EACdiC,MAAO,GACPC,UAAW,I,wEAyDX,OACI,yBAAKC,UAAU,kBACX,yBAAKC,MAAO,CAACC,OAAQ,OAAQpB,SAAS,OAAQqB,WAAW,OAAQC,MAAM,YAAvE,WACA,kBAAC,IAAD,CACIR,KAAMS,KAAKd,MAAMC,UACjBc,QAASD,KAAKd,MAAM1B,aACpB0C,OAAQ,W,GA7ERC,cAAdlB,EAiBKmB,yBAA2B,SAACC,EAAWC,GAC1C,GAAGD,EAAUZ,QAAUa,EAAUb,MAC7B,OAAGY,EAAUZ,MAAM,GAAKa,EAAUZ,UACvB,CACHD,MAAOY,EAAUZ,MACjBN,UAAW,CACPC,OAAQ,CAAC,OAAQ,QAAS,MAAO,SAAU,WACzCC,SAAU,CACR,CACEC,MAAO,WACPC,KAAMc,EAAUZ,MAChBD,gBAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,eAOpE,CACHC,MAAOY,EAAUZ,MACjBN,UAAW,CACPC,OAAQ,CAAC,OAAQ,QAAS,MAAO,SAAU,WACzCC,SAAU,CACR,CACEC,MAAO,WACPC,KAAMc,EAAUZ,MAChBD,gBAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,eAO9E,GAAGa,EAAUX,YAAcY,EAAUZ,UAAW,CACjD,IAAIa,EAAc/C,EAGlB,OADA8C,EAAUZ,UAAYW,EAAUX,UACzB,CACHlC,aAAc+C,GAGtB,OAAO,MA+BAtB,QC9FTuB,E,2MACFtB,MAAQ,CACJuB,eAAgB,EAAKC,MAAMD,gB,wEAa3B,OACI,yBAAKd,UAAU,YACX,yBAAKC,MAAO,CAACnB,SAAU,OAAQqB,WAAW,OAAQC,MAAM,YAAxD,iBAGA,yBAAKH,MAAO,CAACjC,QAAS,SAClB,yBAAKiC,MAAOe,GAAUX,KAAKd,MAAMuB,gBACjC,yBAAKb,MAAO,CAACgB,KAAK,IAAKnC,SAAS,OAAQqB,WAAW,MAAOe,UAAU,SAAUd,MAAM,YAApF,WACY,6BADZ,kB,GAtBEI,aAAhBK,EAKKJ,yBAA2B,SAACC,EAAWC,GAC1C,OAAGD,EAAUI,iBAAmBH,EAAUG,eAC/B,CACHA,eAAgBJ,EAAUI,gBAG3B,MAoBf,IAAME,EAAU,CACZC,KAAK,IACLnC,SAAS,OACTqC,WAAW,OACXD,UAAU,SACVd,MAAO,UACPD,WAAY,QAIDU,I,iBCtCTO,G,kNACF7B,MAAQ,CACJ8B,UAAW,EAAKN,MAAMhB,W,wEAchB,IAAD,OACL,OACI,yBAAKC,UAAU,YACX,yBAAKC,MAAO,CAACnB,SAAU,OAAQqB,WAAW,OAAQC,MAAM,YAAxD,aACA,kBAAC,IAAD,CACIkB,SAAU,EACVC,SAAU,GACVC,MAAOnB,KAAKd,MAAM8B,UAClBI,KAAM,EACNC,SAAU,SAAAF,GACN,EAAKG,SAAS,CAACN,UAAUG,IACzB,EAAKT,MAAMa,gBAAgBJ,IAE/BK,iBAAkB,SAAAL,GAAK,OAAI,EAAKT,MAAMe,gBAAgBN,W,GA7BlDhB,cAAlBY,EAKKX,yBAA2B,SAACC,EAAWC,GAC1C,OAAGD,EAAUX,YAAcY,EAAUU,UAC1B,CACHA,UAAWX,EAAUX,WAGtB,MAgCAqB,Q,iBCsCAW,E,2MA1EbxC,MAAQ,CACNyC,MAAM,GACNC,OAAO,GACPnC,MAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,IACtBjC,eACAiD,eAAgB,EAChBf,UAAW,GACXmC,WAAW,G,EAKbC,aAAe,SAACC,GACd,EAAKT,SAAS,CAAC7B,MAAOsC,EAAMC,KAAI,SAAAzC,GAAI,OAAIA,Q,EAG1CkC,gBAAkB,SAAC/B,GACjB,EAAK4B,SAAS,CAAC5B,cACf,EAAKR,MAAM0C,OAAOK,KAAK,gBAAiBvC,I,EAG1C6B,gBAAkB,SAAC7B,GACjB,EAAK4B,SAAS,CAAC5B,e,EAGjBwC,mBAAqB,WAEnB,IAAMN,EAASO,IAAG,0BAClBP,EAAOQ,GAAG,WAAW,WACnBC,QAAQC,IAAI,aACZ,EAAKhB,SAAS,CAACM,OAAQA,OAEzBA,EAAOQ,GAAG,UAAU,SAAAL,GAClB,EAAKD,aAAaC,MAEpBH,EAAOQ,GAAG,cAAc,SAAA7C,GACtB,IAAIgD,EAAU,EAAKrD,MAAMuB,eACzB8B,GAAW,EACX,EAAKjB,SAAS,CAACb,eAAgB8B,Q,EAInCC,kBAAoB,WAClBC,MAAM,cACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnD,GAAI,OAAI,EAAK+B,SAAS,CAAC5B,UAAWH,EAAI,cAAmBkB,eAAgBlB,EAAI,iB,wEAMnF,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACAF,MAAOO,KAAKd,MAAMO,MAClBjC,aAAcwC,KAAKd,MAAM1B,aACzBkC,UAAWM,KAAKd,MAAMQ,YAEtB,yBAAKC,UAAU,WACb,kBAAC,EAAD,CACEc,eAAgBT,KAAKd,MAAMuB,iBAC7B,kBAAC,EAAD,CACEf,UAAWM,KAAKd,MAAMQ,UACtB6B,gBAAiBvB,KAAKuB,gBACtBE,gBAAiBzB,KAAKyB,yB,GAlElBtB,aCCE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,iB","file":"static/js/main.b4c7653a.chunk.js","sourcesContent":["let chartOptions={\r\n    responsive: true,\r\n    legend: {display: false},\r\n    maintainAspectRatio: false,\r\n    elements: {\r\n        line: {\r\n          fill: false\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n            gridLines:{ drawBorder:false},\r\n            barPercentage: 0.4,\r\n            ticks: {\r\n                autoSkip: false,\r\n                maxRotation: 15,\r\n                minRotation: 45,\r\n                fontSize: 13,\r\n                fontStyle: 'bold'    \r\n            }\r\n        }],\r\n        yAxes: [{\r\n            gridLines:{ drawBorder: false},\r\n            ticks:{\r\n                min:0,\r\n                max:50,\r\n                stepSize:50\r\n            },\r\n        }],\r\n    },\r\n    animation:{\r\n        duration: 2000\r\n    },\r\n    // annotation: {\r\n    //     annotations: [{\r\n    //             // drawTime: \"afterDatasetsDraw\",\r\n    //             // id: \"hline\",\r\n    //             drawTime: 'afterDraw',\r\n    //             type: \"line\",\r\n    //             mode: \"horizontal\",\r\n    //             scaleID: \"y-axis-0\",\r\n    //             value: 10,\r\n    //             borderColor: \"#747474\",\r\n    //             borderWidth: 0,\r\n    //             label: {\r\n    //                 backgroundColor: \"#747474\",\r\n    //                 content: \"Threshold\",\r\n    //                 enabled: true,\r\n    //                 position: 'right',\r\n    //                 xAdjust: 0,\r\n    //             }\r\n    //     }]\r\n    // }\r\n  }\r\n\r\nexport default chartOptions;","import React, {Component} from 'react';\r\nimport {Bar, Line} from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\nimport chartOptions from '../chartOptions';\r\nimport 'chartjs-plugin-annotation';\r\n\r\n\r\nclass Chart extends Component {\r\n    state = {\r\n        chartData: {\r\n            labels: ['CALM', 'ANGER', 'JOY', 'SORROW', 'ENGERGY'],\r\n              datasets: [\r\n                {\r\n                  label: 'Emotions',\r\n                  data: [25, 12, 11, 35, 29],\r\n                  backgroundColor:['#37CCF2', '#37CCF2', '#FB6568', '#37CCF2' ,'#37CCF2' ,'#37CCF2']\r\n                }\r\n              ]\r\n        },\r\n        chartOptions: chartOptions,\r\n        moods: [],\r\n        threshold: {},\r\n    }\r\n\r\n    static getDerivedStateFromProps = (nextProps, prevState) => {\r\n        if(nextProps.moods !== prevState.moods) {\r\n            if(nextProps.moods[2] > prevState.threshold){\r\n                return {\r\n                    moods: nextProps.moods,\r\n                    chartData: {\r\n                        labels: ['CALM', 'ANGER', 'JOY', 'SORROW', 'ENGERGY'],\r\n                          datasets: [\r\n                            {\r\n                              label: 'Emotions',\r\n                              data: nextProps.moods,\r\n                              backgroundColor:['#37CCF2', '#37CCF2', '#FB6568', '#37CCF2' ,'#37CCF2']\r\n                            }\r\n                          ]\r\n                    },\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    moods: nextProps.moods,\r\n                    chartData: {\r\n                        labels: ['CALM', 'ANGER', 'JOY', 'SORROW', 'ENGERGY'],\r\n                          datasets: [\r\n                            {\r\n                              label: 'Emotions',\r\n                              data: nextProps.moods,\r\n                              backgroundColor:['#37CCF2', '#37CCF2', '#37CCF2', '#37CCF2' ,'#37CCF2']\r\n                            }\r\n                          ]\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        else if(nextProps.threshold !== prevState.threshold) {\r\n            let tempOptions = chartOptions;\r\n            // tempOptions.annotation.annotations[0].value = nextProps.threshold;\r\n            prevState.threshold = nextProps.threshold;\r\n            return {\r\n                chartOptions: tempOptions,\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    // componentDidMount = () => {\r\n    //     let tempOptions = this.state.chartOptions;\r\n    //     tempOptions.annotation.annotations[0].value = this.props.threshold;\r\n    //     this.setState({chartOptions: tempOptions});\r\n    // }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className='chartContainer'>\r\n                <div style={{margin: '12px', fontSize:'26px', fontWeight:'bold', color:'#747474'}}>EMOTION</div>\r\n                <Bar\r\n                    data={this.state.chartData}\r\n                    options={this.state.chartOptions}\r\n                    height={240}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nChart.propTypes = {\r\n    threshold: PropTypes.any.isRequired,\r\n    chartOptions: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Chart\r\n","import React, { Component } from 'react'\r\n\r\nclass Counter extends Component {\r\n    state = {\r\n        candiesDropped: this.props.candiesDropped\r\n    }\r\n\r\n    static getDerivedStateFromProps = (nextProps, prevState) => {\r\n        if(nextProps.candiesDropped !== prevState.candiesDropped) {\r\n            return {\r\n                candiesDropped: nextProps.candiesDropped\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='cd-count'>\r\n                <div style={{fontSize: '25px', fontWeight:'bold', color:'#747474'}}>\r\n                    CANDY DROPPED\r\n                </div>\r\n                <div style={{display: 'flex'}}>\r\n                    <div style={counter}>{this.state.candiesDropped}</div>\r\n                    <div style={{flex:'2', fontSize:'18px', fontWeight:'900', alignSelf:'center', color:'#747474'}}>\r\n                        Candies <br/> Dropped\r\n                    </div>\r\n                </div>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nconst counter = {\r\n    flex:'1',\r\n    fontSize:'75px',\r\n    marginLeft:'25px',\r\n    alignSelf:'center',\r\n    color: '#37CCF2',\r\n    fontWeight: 'bold'\r\n}\r\n\r\n\r\nexport default Counter\r\n","import React, { Component } from 'react';\r\nimport InputRange from 'react-input-range';\r\nimport '../inputRange.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Threshold extends Component {\r\n    state = {\r\n        sliderVal: this.props.threshold,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (nextProps, prevState) => {\r\n        if(nextProps.threshold !== prevState.sliderVal) {\r\n            return {\r\n                sliderVal: nextProps.threshold\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='cd-slide'>\r\n                <div style={{fontSize: '25px', fontWeight:'bold', color:'#747474'}}>THRESHOLD</div>\r\n                <InputRange\r\n                    minValue={0}\r\n                    maxValue={50}\r\n                    value={this.state.sliderVal}\r\n                    step={1}\r\n                    onChange={value => {\r\n                        this.setState({sliderVal:value});\r\n                        this.props.changeThreshold(value);\r\n                    }}\r\n                    onChangeComplete={value => this.props.updateThreshold(value)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nThreshold.propTypes = {\r\n    threshold: PropTypes.any.isRequired,\r\n    updateThreshold: PropTypes.func.isRequired,\r\n    changeThreshold: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Threshold\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\nimport Counter from './components/Counter';\nimport Threshold from './components/Threshold';\nimport chartOptions from './chartOptions';\nimport io from 'socket.io-client';\n\n\n\n\nclass App extends Component {\n  state = {\n    sData:{},\n    socket:{},\n    moods: [26,37,15,2,22,17],\n    chartOptions,\n    candiesDropped: 0,\n    threshold: 25,\n    connected: false    \n  }\n\n  \n\n  getChartData = (ndata) => {\n    this.setState({moods: ndata.map(data => data)});\n  }\n\n  updateThreshold = (threshold) => {\n    this.setState({threshold});\n    this.state.socket.emit('change_thresh', threshold);\n  }\n\n  changeThreshold = (threshold) => {\n    this.setState({threshold});\n  }\n\n  componentWillMount = () => {\n\n    const socket = io('http://localhost:5000/');\n    socket.on('connect', () => {\n      console.log('Connected');\n      this.setState({socket: socket});\n    });\n    socket.on('update', ndata => {\n      this.getChartData(ndata);\n    });\n    socket.on('candy_drop', data => {\n      let candies = this.state.candiesDropped;\n      candies += 1;\n      this.setState({candiesDropped: candies});\n    });\n  }\n\n  componentDidMount = () => {\n    fetch('/api/data/')\n    .then(res => res.json())\n    .then(data => this.setState({threshold: data['JOY_THRESHOLD'], candiesDropped: data['CANDY_DROP']}))\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Chart \n          moods={this.state.moods}\n          chartOptions={this.state.chartOptions}\n          threshold={this.state.threshold}\n          />\n          <div className='control'>\n            <Counter\n              candiesDropped={this.state.candiesDropped}/>\n            <Threshold \n              threshold={this.state.threshold}\n              changeThreshold={this.changeThreshold}\n              updateThreshold={this.updateThreshold}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}